<apex:component controller="AutoCompleteController" selfClosing="true">
    <apex:attribute name="SObject" description="SOQL Object to query"
        type="String" assignTo="{!sObjVal}" required="true" />
    <apex:attribute name="labelField"
        description="API Name of Field to display for label" type="String"
        required="true" assignTo="{!labelFieldVar}"/>
    <apex:attribute name="valueField"
        description="API Name of Field to display for value that is passed to the targetField"
        type="String" required="true" assignTo="{!valueFieldVar}"/>
    <apex:attribute name="targetField"
        description="Field of current object that will hold the selection."
        type="Object" assignTo="{!targetFieldVar}"/>
    <apex:attribute name="inputFieldId"
        description="Id of the field where the value will copied[Not generally required, used when you need to copy value to a field using js]"
        type="String" />
     <apex:attribute name="importJquery"
        description="Assign false if you dont want to jquery files"
        type="Boolean" default="true" />
    <apex:attribute name="onSelectCallback" description="Callback javascript method on select event" type="String"/>
    <apex:attribute name="syncManualEntry"
        description="Allow manual entry of data from autocomplete component."
        type="Boolean" default="true" />
    <apex:attribute name="allowClear" 
        description="Set true to give user a option to clear existing value" type="Boolean" default="true"/>
    <apex:attribute name="noValueLabel"
        description="Customizable label displayed when no records are selected"
        type="String" />
    <apex:attribute name="whereClause"
        description="Add where clause to the search"
        type="String" />
    <apex:attribute name="minimumInputLength"
                    description="Minimum input required to start search" type="String"
                    required="true"/>
        
    <apex:attribute name="Style" description="style for the input component" type="String"/>
    <!--Required js files-->
    <apex:outputPanel rendered="{!importJquery}">
        <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"/>
    </apex:outputPanel>
        <apex:includeScript value="{!URLFOR($Resource.Select2, 'select2-3.5.4/select2.js')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.Select2, 'select2-3.5.4/select2.css')}"/>
    	<apex:includeScript value="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"/>
    
    <script>
        var v2{!randomJsIden};
        var prevVal{!randomJsIden};
        function autocompleteV2{!randomJsIden}(){
          var v2=this;
          jQuery(function($){
              v2.init($)
          });
        }
        
        autocompleteV2{!randomJsIden}.prototype={
          init : function($){
            var $elem = $( ".auto{!randomJsIden}" ).select2({
              minimumInputLength: {!minimumInputLength},
              placeholder: '{!noValueLabel}' ? '{!noValueLabel}' : 'No value selected',
              allowClear : {!allowClear},
              query: function (query) {
              	_.debounce(queryData{!randomJsIden}(query), 1000); 
              },
              createSearchChoice:function(term, data) {
                if({!syncManualEntry} == true){
                  return {id:term, text:term};
                }
              }
            });

            $elem.on("select2-selecting", function(e) {
              $('.hiddenField{!randomJsIden}').val(e.val);
              
              if ('{!onSelectCallback}')
              {
                 {!onSelectCallback}(e.val);
              }
            });

            $elem.on("select2-removed", function(e) {
              $('.hiddenField{!randomJsIden}').val('');
              
              if ('{!onSelectCallback}')
              {
                 {!onSelectCallback}(null);
              }
            });
            if({!cacheField !=''}){
              $elem.select2("data", {id: "{!targetFieldVar}", text: "{!cacheField}"})  
            }  
          },
                    
          triggerSearch :function(val){
            if(prevVal{!randomJsIden} != val){
              $=jQuery;
              prevVal{!randomJsIden} = val;
              var select = $('input.auto{!randomJsIden}');          
              var search = $('.select2-input')
              select.select2('open');
              search.val(val);
              search.trigger("input");
            }
          }
        }

         /*
        *This method queries data according to the passed parameter
        *and populates the combobox accordingly
        ***/    
        function queryData{!randomJsIden}(query){
          	callRemoteAction{!randomJsIden}(query);
        }         
                     
        var callRemoteAction{!randomJsIden} = _.debounce(function(query){
              Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.AutoCompleteController.getData}','{!sObjVal}','{!labelFieldVar}','{!valueFieldVar}',"{!whereClause}",query.term,
                function(result, event){
                  //if success
                  if(event.status){ 
                    var data = {results: []}
                    data.results = result;                            
                    query.callback( data);                           
                  }
                  else{
                    alert('Invalid Field/Object API Name : '+event.message);
                  }
                }, 
                {escape: false}
              );}, 
              500);
       
    </script>
    
    <apex:inputText style="{!Style}" styleClass="auto{!randomJsIden}" value="{!cacheField}" />
 
    <apex:outputPanel id="hiddenPanel">
        <apex:inputText value="{!targetField}" id="hiddenField"
            styleClass="hiddenField{!randomJsIden}" style="display:none"/>
    </apex:outputPanel>
    <script>v2{!randomJsIden} = new autocompleteV2{!randomJsIden}({});</script>
</apex:component>